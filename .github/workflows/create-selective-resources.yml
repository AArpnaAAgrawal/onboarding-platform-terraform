name: 'Create Selective Resources'
on:
  # push:
  #   branches: [ "main" ]
  # pull_request:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: Choose the environment to deploy the Terraform code
        options: 
        - nonprod
        - qa
        - prod
      resource:
        type: choice
        description: Choose the resource to create
        options:
        - vnet
        #- module.azure-infra.azurerm_virtual_network.poc_vnet
        - module.azure-infra.azurerm_storage_account.sa 

permissions:
  contents: read

env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
  ARM_CLIENT_SECRET: "${{ secrets.AZURE_CLIENT_SECRET }}"
  
  

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout code
      uses: actions/checkout@v2
      
    # Install Terraform
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1     


    # Install Azure CLI
    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        
    # Login to Azure
    - name: Login to Azure 
      run: az login --service-principal -u "${ARM_CLIENT_ID}" -p "${ARM_CLIENT_SECRET}" --tenant "${ARM_TENANT_ID}" >/dev/null
      
    # Map the Input Value
    - name: Set Mapped Value
      id: set-mapped-value
      run: |
        input_value="${{ github.event.inputs.resource }}"
        mapped_value=""
        
        if [ "$input_value" == "vnet" ]; then
          mapped_value="module.azure-infra.azurerm_virtual_network.poc_$input_value"
        fi
        
        echo "::set-output name=mapped-output::$mapped_value"
      env:
        my-input: ${{ github.event.inputs.my-input }}
        
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init - Azure Infra
      run: |
        cd ${{ github.event.inputs.environment }}/azure-infra       
        terraform init 
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    # Generates an execution plan for Terraform
    - name: Terraform Plan - Azure Infra
      run: |
        mapped_value="${{ steps.set-mapped-value.outputs.mapped-output }}"
        cd ${{ github.event.inputs.environment }}/azure-infra
        terraform plan -target=$mapped_value -var-file=terraform.tfvars
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    # Apply the Terraform Code
    - name: Terraform Apply - Azure Infra
      run: |
        mapped_value="${{ steps.set-mapped-value.outputs.mapped-output }}"
        cd ${{ github.event.inputs.environment }}/azure-infra
        terraform apply -target=$mapped_value -var-file=terraform.tfvars --auto-approve
      env: 
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        
