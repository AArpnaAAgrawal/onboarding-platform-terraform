# This is a basic workflow to help you get started with Actions

name: multi-choice-workflow

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
     inputs:
       resources:
         required: true
         description: |
           Enter the comma seperated values. Below are the available options.
           - vnet
           - key_vault
           - route_table
           - resource_group
           - storage_account
           - storage_container
           - log_analytics_workspace
           - key_vault_access_policy
           - key_vault_service_principal_access_policy

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          IFS=',' read -ra resources <<< "$TF_RESOURCES"
             for resource in "${resources[@]}"; do
               echo "Processing resource: $resource" 
                 
               case "$resource" in
                 "vnet")
                   mapped_value="$mapped_value,module.azure-infra.azurerm_virtual_network.$resource"
                   ;;
                 "key_vault")
                   mapped_value="$mapped_value,module.azure-infra.azurerm_key_vault.$resource"
                   ;;
                 "route_table")
                   mapped_value="$mapped_value,module.azure-infra.azurerm_route_table.$resource"
                   ;;
                 "resource_group")
                   mapped_value="$mapped_value,module.azure-infra.azurerm_resource_group.$resource"
                   ;;
                 "storage_account")
                   mapped_value="$mapped_value,module.azure-infra.azurerm_storage_account.$resource"
                   ;;
                 "storage_container")
                   mapped_value="$mapped_value,module.azure-infra.azurerm_storage_container.$resource"
                   ;;
                 "log_analytics_workspace")
                   mapped_value="$mapped_value,module.azure-infra.azurerm_log_analytics_workspace.$resource"
                   ;;
                 "key_vault_access_policy")
                   mapped_value="$mapped_value,module.azure-infra.azurerm_key_vault_access_policy.$resource"
                   ;;
                 "key_vault_service_principal_access_policy")
                   mapped_value="$mapped_value,module.azure-infra.azurerm_key_vault_access_policy.$resource"
                   ;;
                 *)
                   echo "Input value '$input_value' not recognized"
                   exit 1
                   ;;                   
               esac
             done
             # Remove the comma at the beginning of the string
             if [[ "$mapped_value" == ,* ]]; then
                  mapped_value="${mapped_value#,}"
             fi
             echo "MAPPED_VALUE: $mapped_value"
          echo "::set-output name=mapped-output::$mapped_value"
        env:
             TF_RESOURCES: ${{ github.event.inputs.resources }}
             
      # Generates an execution plan for Terraform
      - name: Terraform Plan - Azure Infra
        run: |
          targets="${{ steps.set-mapped-value.outputs.mapped-output }}"
          IFS=',' read -ra "$targets"
               for target in "${targets[@]}"; do
                 echo "Processing target: $target"                
               done
        
        #cd ${{ github.event.inputs.environment }}/azure-infra
        #terraform plan -target=$mapped_value -var-file=terraform.tfvars
           
          
         
